"""
DO NOT EDIT THIS FILE MANUALLY; THIS IS JUST A COPY OF THE CODE IN LAMBDA FOR FUTURE REFERENCE.
The Lambda function does the following:
- Sends emails via Amazon SES to verified email addresses,
- Updates reminder status to 'sent' or 'failed' in Supabase, 
- Updates records in reminder_notifications in Supabase

Commands run to build and deploy:
```
cat > requirements.txt << 'EOF'                                                               
supabase==2.9.0
boto3                              
EOF

pip install \                                                                                 
  --platform manylinux2014_x86_64 \
  --target . \
  --implementation cp \
  --python-version 3.11 \
  --only-binary=:all: \
  --upgrade \
  -r requirements.txt

zip -r reminder_lambda.zip .

ls -lh reminder_lambda.zip

And then upload reminder_lambda.zip to AWS Lambda console, deploy and test the code.
```
An Eventbridge rule triggers this Lambda function every minute to check for due reminders.
"""

import json
import os
from datetime import datetime, timezone
from uuid import uuid4
import boto3
from supabase import create_client, Client

# Initialize SES client
ses_client = boto3.client('ses', region_name='ap-southeast-1')

# Supabase client singleton
_supabase_client = None

def get_supabase_client() -> Client:
    """Get or create Supabase client singleton"""
    global _supabase_client
    
    if _supabase_client is None:
        url = os.environ['SUPABASE_URL']
        key = os.environ['SUPABASE_KEY']
        
        if not url or not key:
            raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set")
        
        _supabase_client = create_client(url, key)
        print("Supabase client initialized")
    
    return _supabase_client

SENDER_EMAIL = os.environ.get('SENDER_EMAIL')

def lambda_handler(event, context):
    """Check for due reminders and send email notifications"""
    try:
        print("Starting reminder check...")
        
        supabase = get_supabase_client()
        now = datetime.now(timezone.utc).isoformat()
        
        # Change this code to fetch user email from the users table based on user_id
        # Query reminders that are due
        response = supabase.table('reminders').select(
            '''
            reminder_id,
            user_id,
            description,
            reminder_date,
            users:users (
                email_id
            )
            '''
        ).lte('reminder_date', now).eq('status', 'pending').execute()
        
        reminders = response.data
        
        if not reminders:
            print("No reminders to send")
            return {
                'statusCode': 200,
                'body': json.dumps({'message': 'No reminders to send'})
            }
        
        print(f"Found {len(reminders)} reminders to process")
        
        sent_count = 0
        failed_count = 0
        
        for reminder in reminders:
            try:
                reminder_id = reminder['reminder_id']
                user_id = reminder['user_id']
                description = reminder['description']

                # Get user email from joined users relationship
                user_info = reminder.get('users')
                user_email = user_info.get('email_id') if user_info else None

                # fallback lookup
                if not user_email and reminder.get('user_id'):
                    result = supabase.table('users').select('email_id').eq('user_id', reminder['user_id']).single().execute()
                    if result.data:
                        user_email = result.data['email_id']
                
                # Send email notification to specific user
                send_email_notification(user_email, description, reminder['reminder_date'])
                
                # Create notification record
                notification_data = {
                    'notification_id': str(uuid4()),
                    'reminder_id': reminder_id,
                    'user_id': user_id,
                    'delivery_status': 'sent',
                    'sent_at': datetime.now(timezone.utc).isoformat(),
                    'metadata': {
                        'email': user_email,
                        'method': 'ses'
                    }
                }
                
                supabase.table('reminder_notifications').insert(notification_data).execute()
                
                # Update reminder status
                supabase.table('reminders').update({
                    'status': 'sent',
                    'last_sent': datetime.now(timezone.utc).isoformat(),
                    'updated_at': datetime.now(timezone.utc).isoformat()
                }).eq('reminder_id', reminder_id).execute()
                
                print(f"âœ“ Successfully sent reminder {reminder_id} to {user_email}")
                sent_count += 1
                
            except Exception as e:
                print(f"âœ— Failed to send reminder {reminder.get('reminder_id')}: {str(e)}")
                mark_reminder_failed(supabase, reminder.get('reminder_id'), reminder.get('user_id'), str(e))
                failed_count += 1
        
        result = {
            'message': f'Processed {len(reminders)} reminders',
            'sent': sent_count,
            'failed': failed_count
        }
        
        print(f"Processing complete: {result}")
        
        return {
            'statusCode': 200,
            'body': json.dumps(result)
        }
        
    except Exception as e:
        print(f"Error in lambda_handler: {str(e)}")
        import traceback
        traceback.print_exc()
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }

def mark_reminder_failed(supabase, reminder_id, user_id, error_msg):
    """Mark a reminder as failed and create notification record"""
    try:
        notification_data = {
            'notification_id': str(uuid4()),
            'reminder_id': reminder_id,
            'user_id': user_id,
            'delivery_status': 'failed',
            'sent_at': datetime.now(timezone.utc).isoformat(),
            'metadata': {'error': error_msg}
        }
        supabase.table('reminder_notifications').insert(notification_data).execute()
        
        supabase.table('reminders').update({
            'status': 'failed',
            'updated_at': datetime.now(timezone.utc).isoformat()
        }).eq('reminder_id', reminder_id).execute()
    except Exception as e:
        print(f"Failed to mark reminder as failed: {str(e)}")

def send_email_notification(user_email, description, reminder_date):
    """Send email notification via Amazon SES to specific user"""
    
    try:
        dt = datetime.fromisoformat(reminder_date.replace('Z', '+00:00'))
        formatted_date = dt.strftime('%B %d, %Y at %I:%M %p UTC')
    except:
        formatted_date = reminder_date
    
    subject = "ðŸ”” Reminder from Your Chatbot"
    
    body_text = f"""
Hello,

This is your reminder:

{description}

Scheduled for: {formatted_date}

---
This reminder was sent by your AI Chatbot Assistant.
    """.strip()
    
    body_html = f"""
<html>
<head></head>
<body>
  <h2>ðŸ”” Reminder</h2>
  <p>{description}</p>
  <p><strong>Scheduled for:</strong> {formatted_date}</p>
  <hr>
  <p><small>This reminder was sent by your AI Chatbot Assistant.</small></p>
</body>
</html>
    """.strip()
    
    # Send email via SES directly to user
    response = ses_client.send_email(
        Source=SENDER_EMAIL,
        Destination={
            'ToAddresses': [user_email]
        },
        Message={
            'Subject': {
                'Data': subject,
                'Charset': 'UTF-8'
            },
            'Body': {
                'Text': {
                    'Data': body_text,
                    'Charset': 'UTF-8'
                },
                'Html': {
                    'Data': body_html,
                    'Charset': 'UTF-8'
                }
            }
        }
    )
    
    print(f"SES email sent to {user_email}: {response['MessageId']}")
    return response